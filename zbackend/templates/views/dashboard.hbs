<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mafia - Dashboard</title>

    <!-- CSS LINK -->
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');
        *{
            font-family: 'Poppins', sans-serif;
            margin: 0;
            padding: 0;
            scroll-padding-top: 2rem;
            scroll-behavior: smooth;
            box-sizing: border-box;
            list-style: none;
            text-decoration: none;
            color:var(--text-color);
        }

        :root{
            --main-color: #131924;
            --text-color: #131924;
            --bg-color: #fff;
        }
        body::-webkit-scrollbar{
            display: none;
        }
        img{
            width: 100%;
        }
        .container{
            max-width: 1068px;
            margin: auto;
            width: 100%;
            color: #fff;
        }
        header{
            position: fixed;
            color: #fff;
            top: 0;
            left: 0;
            width: 100%;
            background: var(--text-color);
            box-shadow: 0 1px 4px hsl(0 4% 15% / 10%);
            z-index: 100;
        }
        .nav{
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px;
        }
        .textnew{
            color: white;
        }
        .nav i{
            color: #171427;
        }
        .logo{
            font-size: 2rem;
            color: var(--bg-color);
            font-weight: 600;
        }
        .navlist{
            color: #fff;
        }
        .navlist{
            justify-content: space-around;
        }
        #cart-icon{
            font-size: 1.5rem;
            color: #fff;
        }
        .cart{
            position: fixed;
            top: 0;
            right: -100%;
            width: 360px;
            min-height: 100vh;
            padding: 20px;
            background: var(--bg-color);
            box-shadow: -2px 0 4px hsl(0 4% 15% / 10%);
            transition: .3s ease;
        }
        .cart.active{
            right: 0;
        }
        .cart-title{
            text-align: center;
            font-size: 1.5rem;
            font-weight: 600;
            margin-top: 1rem;
            color: var(--text-color);
        }
        .cart-box{
            display: grid;
            grid-template-columns: 32% 50% 18%;
            align-items: center;
            gap: 1rem;
            margin-top: 1rem;
        }
        .cart-img{
            width: 100px;
            height: 100px;
            object-fit: contain;
            padding: 10px;
        }
        .cart-price{
            font-weight: 500;
        }
        .cart-quantity{
            border: 1px solid var(--text-color);
            outline-color: var(--main-color);
            width: 2.4rem;
            text-align: center;
            font-size: 1rem;
        }
        .cart-remove {
            font-size: 24px;
            cursor: pointer;
        }
        .cart-product-title{
            font-size: 1rem;
            text-transform: uppercase;
        }
        .detail-box{
            display: grid;
            row-gap: 0.5rem;
        }
        .total{
            display: flex;
            justify-content: flex-end;
            margin-top: 1.5rem;
            border-top: 2px solid var(--text-color);    
        }
        .total-title{
            font-size: 1rem;
            font-weight: 600;
        }
        .total-price{
            margin-left: .5rem;
        }
        .btn-buy{
            display: flex;
            margin: 1.5rem auto 0 auto;
            padding: 12px 20px;
            border: none;
            background: var(--main-color);
            color: var(--bg-color);
            font-size: 1rem;
            font-weight: 500;
            transition: .4s ease;
        }
        .btn-buy:hover{
            background: #3c3c3c;
            color: #ffffff;
        }
        #close-cart{
            position: absolute;   
            top: 1rem;
            right: .8rem;
            font-size: 2rem;
            color: var(--text-color);
        }
        .section-title{
            font-size: 2.5rem;
            font-weight: 600;
            margin-top: 120px;
            margin-bottom: 1.5rem;
        }
        .search{
            display: flex;
            align-items: center;
            width: 250px;
            height: 40px;
            background-color: #131924;
            border-radius: 2px;
            padding: 3px;
            margin-bottom: 20px;
        }
        .search > i{
            font-size: 20px;
            color: var(--main-color);
            padding: 10px;
        }
        .search > input{
            flex: 1;
            height: 20px;
            border: none;
            outline: none;
            font-size: 12px;
            background: transparent;
            color: #fff;
        }
        .search_bx2{
            width: 200px;
            height: 20px;
            color: rgb(0, 0, 0);
            border: 1px solid #fff;
        }
        .shop {
            margin-top: 2rem;
        }
        .shop-content{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px,auto));
            gap: 1.5rem;
            margin-bottom: 45px;
        }
        .product-box{
            position: relative;
        }
        .product-box:hover{
            padding: 10px;
            border: 1px solid var(--text-color);
            transition: 0.7s ease;
        }
        .product-title{
            font-size: 1.1rem;
            font-weight: 600;
            text-transform: uppercase;
            margin-bottom: 0.5rem;
        }
        .product-desc,.product-type{
            font-size: .9rem;
            font-weight: 500;
            text-transform: capitalize;
            color: #686868;
            margin-bottom: 0.5rem;
        }
        .price{
            font-weight: 500;
        }
        .add-cart{
            position: absolute;
            bottom: 0;
            right: 0;
            background-color: var(--text-color);
            color: var(--bg-color);
            padding: 10px;
        }
        .add-cart:hover{
            background: hsl(249, 32%, 17%);
        }



        .CategoryList label{
            display: block;
            padding: 4px 0;
        }


        /* Filter feature */
        .dropdown {
            position: relative;
            display: inline-block; 

        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #ffffff;
            min-width: 200px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
            border-radius: .5em;
        }

        .dropdown-content label {
            padding: 8px 16px;
            display: block;
            cursor: pointer;
            color: #202020;
        }

        .dropdown-content label:hover {
            background-color: #171427c8;
            color: #ffffff;
        }

        .dropdown:hover .dropdown-content {
            display: block;
        }

        .dropdown:hover .dropbtn {
            background-color: #171427de;
            color: #ffffff;
        } 

        .dropbtn {
            background-color: #131924;
            color: white;
            padding: 10px;
            font-size: 14px;
            border: none;
            cursor: pointer;
            border-radius: 2px; 
            margin-bottom: 20px;
        }

        .searchContainer{
            display: flex;
            justify-content: space-between;
        }


        @media (max-width:1080px){
            .nav {
                padding:15px;
            }
            section{
                padding: 3rem 0 2rem;
            }
            .container {
                margin: 0 auto;
                width: 90%;
            }
            .shop{
                margin-top: 2rem !important;
            }
        }
        @media (max-width:400px){
            .nav{
                padding: 11px;
            }
            .logo{
                font-size: 1rem;
            }
            .cart{
                width: 320px;
            }
            .section-title{
                margin-top: 2px;
            }
        }
        @media (max-width:360px){
            .shop{
                margin-top: 1rem !important;
            }
            .cart{
                width: 280px;
            }
        }


/* Price Filter Container */
.price-filter {
    display: flex;
    align-items: center;
    padding: 8px;
    background: var(--bg-color); /* Matches the background color */
    border: 1px solid var(--text-color);
    border-radius: 2px;
    margin-top: -15px;
    margin-bottom: 20px;
}

/* Label for Price Filter */
.price-filter label {
    display: block;
    font-size: 1rem; /* Reduced font size */
    font-weight: 500; /* Slightly lighter weight */
    margin-bottom: 6px;
    color: var(--text-color);
}

/* Slider */
#priceRange {
    width: 100%;
    -webkit-appearance: none; /* Remove default styling */
    background: var(--main-color);
    height: 5px; /* Reduced height */
    border-radius: 4px; /* Reduced border radius */
    outline: none;
    margin-bottom: 8px;
}

#priceRange::-webkit-slider-thumb {
    -webkit-appearance: none; /* Remove default styling */
    appearance: none;
    width: 12px; /* Reduced thumb width */
    height: 12px; /* Reduced thumb height */
    background: var(--text-color);
    cursor: pointer;
    border-radius: 50%;
}

#priceRange::-moz-range-thumb {
    width: 16px;
    height: 16px;
    background: var(--text-color);
    cursor: pointer;
    border-radius: 50%;
}

/* Number Input Field */
#priceValue {
    width: 100%;
    padding: 6px; /* Reduced padding */
    border: 1px solid var(--text-color);
    border-radius: 4px; /* Reduced border radius */
    background: var(--bg-color);
    color: var(--text-color);
    font-size: 0.9rem; /* Reduced font size */
    box-sizing: border-box; /* Ensure padding is included in width */
}

/* Adjust the number input to match slider */
.price-filter input[type="number"] {
    width: 100%;
    margin-top: 4px; /* Reduced margin-top */
    box-sizing: border-box;
}

     </style>

    <!-- Font -->
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>

</head>
<body>
    <!-- Header -->
    <header>
        <div class="nav container">
            <a href="./login" class="logo">Mafia</a>
            <i class="bx bx-shopping-bag" id="cart-icon"></i>
            <div class="cart">
                <h2 class="cart-title">Your Cart</h2>
                <div class="cart-content"></div>
                <div class="total">
                    <div class="total-title">Total</div>
                    <div class="total-price">$0</div>
                 </div>
                 <button type="button" class="btn-buy">Buy Now</button>
                  <i class="bx bx-x" id="close-cart"></i>
            </div>
        </div>
    </header>
    
    <section class="shop container">
        <h2 class="section-title">GTA 5 - CAR COLLECTION</h2>

        <div class="searchContainer">
        {{!-- Search Box --}}
            <div class="search">
                <i class="bx bx-search" id="cart-icon"></i>
                <input type="text" id="search-item" placeholder="Search Model" onkeyup="search()">
            </div>

            <div class="price-filter">
                <label for="priceRange">Budget:</label>
                <input type="range" id="priceRange" min="0" step="0.01">
                <input type="number" id="priceValue" step="0.01" min="0">
            </div>


                <div id="filter-container">
                    <label for="sort-price">Sort by Price:</label>
                    <select id="sort-price">
                        <option value="default">Select an option</option>
                        <option value="low-to-high">Low to High</option>
                        <option value="high-to-low">High to Low</option>
                    </select>
                </div>

                <div class="filterbox">
                <div class="dropdown">
                    <button class="dropbtn"><i class='bx bxs-filter-alt' style='color:#ffffff'  ></i>  Apply Filter</button>
                    <div class="dropdown-content CategoryList">
                        <!-- The category list items will be dynamically populated by JavaScript -->
                    </div>
                </div>
            </div>

        </div>

        <div class="shop-content" id="shop-content">
            {{#each products}}
            <div class="product-box">
                <img src="{{this.imageurl}}" alt="{{this.title}}" class="product-img">
                <h2 class="product-title">{{this.title}}</h2>
                <h3 class="product-desc">{{this.description}}</h3>
                <h3 class="product-type">{{this.type}}</h3>
                <span class="price">${{this.price}}</span>
                <i class="bx bx-shopping-bag add-cart"></i>
            </div>
            {{/each}}
        </div>
    </section>

    <script>
        let cartIcon = document.querySelector("#cart-icon");
        let cart = document.querySelector(".cart");
        let closeCart = document.querySelector("#close-cart");

        cartIcon.onclick = () =>{
            cart.classList.add("active");
        }

        closeCart.onclick = () =>{
            cart.classList.remove("active");
        }

        if (document.readyState == 'loading'){
            document.addEventListener("DOMContentLoaded", ready);
        } else {
            ready();
        }

        function ready() {
            var removeCartButtons = document.getElementsByClassName('cart-remove');
            for( var i = 0; i < removeCartButtons.length; i++){
                var button = removeCartButtons[i];
                button.addEventListener("click", removeCartItem);
            }

            var quantityInputs = document.getElementsByClassName('cart-quantity');
            for( var i = 0; i < quantityInputs.length; i++){
                var input = quantityInputs[i];
                input.addEventListener('change', quantityChanged);
            }

            var addCart = document.getElementsByClassName('add-cart');
            for( var i = 0; i < addCart.length; i++){
                var button = addCart[i];
                button.addEventListener("click", addCartClicked);
            }

            document.getElementsByClassName("btn-buy")[0].addEventListener("click", buyButtonClicked);

            populateCategories();
        }

        function buyButtonClicked(){
            alert("Your Order is Placed");
            var cartContent = document.getElementsByClassName("cart-content")[0];
            while(cartContent.hasChildNodes()){
                cartContent.removeChild(cartContent.firstChild);
            }
            updatetotal();
        }

        function removeCartItem(event){
            var buttonClicked = event.target;
            buttonClicked.parentElement.remove();
            updatetotal();
        }

        function quantityChanged(event){
            var input = event.target;
            if (isNaN(input.value) || input.value <= 0){
                input.value = 1;
            }
            updatetotal();
        }

        function addCartClicked(event){
            var button = event.target;
            var shopProducts = button.parentElement;
            var title = shopProducts.getElementsByClassName("product-title")[0].innerText;
            var price = shopProducts.getElementsByClassName("price")[0].innerText;
            var productImg = shopProducts.getElementsByClassName("product-img")[0].src;
            addProductToCart(title, price, productImg);
            updatetotal();
        }

        function addProductToCart(title, price, productImg){
            var cartShopBox = document.createElement("div");
            cartShopBox.classList.add('cart-box');
            var cartItems = document.getElementsByClassName("cart-content")[0];
            var cartItemsNames = cartItems.getElementsByClassName("cart-product-title");
            for(var i = 0; i < cartItemsNames.length; i++) {
                if (cartItemsNames[i].innerText == title){
                    alert("You have already added this item to your cart");
                    return;
                }
            } 
        
            var cartBoxContent = `
                <img src="${productImg}" alt="" class="cart-img">
                <div class="detail-box">
                    <div class="cart-product-title">${title}</div>
                    <div class="cart-price">${price}</div>
                    <input type="number" value="1" class="cart-quantity">
                </div>
                <i class="bx bxs-trash-alt cart-remove"></i>`;

            cartShopBox.innerHTML = cartBoxContent;
            cartItems.append(cartShopBox);
            cartShopBox
                .getElementsByClassName('cart-remove')[0]
                .addEventListener('click', removeCartItem);

            cartShopBox
                .getElementsByClassName('cart-quantity')[0]
                .addEventListener('change', quantityChanged);
        }

        function updatetotal() {
            var cartContent = document.getElementsByClassName('cart-content')[0];
            var cartBoxes = cartContent.getElementsByClassName('cart-box');
            var total = 0;
            for( var i = 0; i < cartBoxes.length; i++){
                var cartBox = cartBoxes[i];
                var priceElement = cartBox.getElementsByClassName('cart-price')[0];
                var quantityElement = cartBox.getElementsByClassName('cart-quantity')[0];
                var price = parseFloat(priceElement.innerText.replace("$", ""));
                var quantity = quantityElement.value;
                total = total + (price * quantity);
            }
            total = Math.round(total * 100) / 100;
            document.getElementsByClassName("total-price")[0].innerText = "$" + total;
        }



        // Filter Feature

        function populateCategories() {
            const productTypes = document.querySelectorAll('.product-type');
            const categories = new Set();
            
            productTypes.forEach(typeElement => {
                const categoryText = typeElement.innerText.replace("Type: ", "").trim();
                if (categoryText !== "") {
                    categories.add(categoryText);
                }
            });

            const categoryListDiv = document.querySelector('.CategoryList');
            categories.forEach(category => {
                const label = document.createElement('label');
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.value = category;
                checkbox.addEventListener('change', filterProducts);
                label.appendChild(checkbox);
                label.appendChild(document.createTextNode(category));
                categoryListDiv.appendChild(label);
            });
        }

        function filterProducts() {
            const checkboxes = document.querySelectorAll('.CategoryList input[type="checkbox"]');
            const checkedCategories = [];
            checkboxes.forEach(checkbox => {
                if (checkbox.checked) {
                    checkedCategories.push(checkbox.value);
                }
            });

            const productBoxes = document.querySelectorAll('.product-box');
            productBoxes.forEach(box => {
                const productType = box.querySelector('.product-type').innerText.replace("Type: ", "").trim();
                if (checkedCategories.length === 0 || checkedCategories.includes(productType)) {
                    box.style.display = 'block';
                } else {
                    box.style.display = 'none';
                }
            });
        }

        function search() {
            const searchInput = document.getElementById('search-item').value.toUpperCase();
            const productBoxes = document.querySelectorAll('.product-box');
            productBoxes.forEach(box => {
                const title = box.querySelector('.product-title').innerText.toUpperCase();
                if (title.indexOf(searchInput) > -1) {
                    box.style.display = '';
                } else {
                    box.style.display = 'none';
                }
            });
        }

        // _______________________________________NEW________________________________________________

        document.addEventListener('DOMContentLoaded', () => {
            const priceRange = document.getElementById('priceRange');
            const priceValue = document.getElementById('priceValue');

            // Function to get the maximum price from the products
            function getMaxPrice() {
                const priceElements = document.querySelectorAll('.price');
                let maxPrice = 0;
                
                priceElements.forEach(priceElement => {
                    const price = parseFloat(priceElement.textContent.replace('$', ''));
                    if (price > maxPrice) {
                        maxPrice = price;
                    }
                });
                
                return maxPrice;
            }

            // Set the maximum value of the slider and initialize the display
            const maxPrice = getMaxPrice();
            priceRange.max = maxPrice;
            priceRange.value = maxPrice;
            priceValue.value = maxPrice; // Initialize with max price

            // Event listener for slider input
            priceRange.addEventListener('input', () => {
                priceValue.value = priceRange.value;
                filterProductsByPrice(priceRange.value);
            });

            // Event listener for manual input field
            priceValue.addEventListener('input', () => {
                let inputValue = parseFloat(priceValue.value);
                // Ensure that the input value does not exceed the max price
                if (isNaN(inputValue) || inputValue < 0) {
                    inputValue = 0;
                } else if (inputValue > priceRange.max) {
                    inputValue = priceRange.max;
                }
                // Update the slider position
                priceRange.value = inputValue;
                priceValue.value = inputValue;
                filterProductsByPrice(inputValue);
            });

            // Function to filter products by price
            function filterProductsByPrice(maxPrice) {
                const products = document.querySelectorAll('.product-box');
                products.forEach(product => {
                    const priceElement = product.querySelector('.price');
                    const price = parseFloat(priceElement.textContent.replace('$', ''));
                    if (price <= maxPrice) {
                        product.style.display = '';
                    } else {
                        product.style.display = 'none';
                    }
                });
            }
        });




        document.addEventListener('DOMContentLoaded', function() {
    setupSortByPrice();
});

function setupSortByPrice() {
    const sortDropdown = document.getElementById('sort-price');
    if (sortDropdown) {
        sortDropdown.addEventListener('change', function() {
            const sortValue = this.value;
            sortProducts(sortValue);
        });
    } else {
        console.error('Sort dropdown element not found.');
    }
}

function sortProducts(order) {
    const shopContent = document.getElementById('shop-content');
    if (!shopContent) {
        console.error('Shop content container not found.');
        return;
    }

    const products = Array.from(shopContent.getElementsByClassName('product-box'));

    if (products.length === 0) {
        console.warn('No products found to sort.');
        return;
    }

    products.sort((a, b) => {
        const priceA = parseFloat(a.querySelector('.price')?.innerText.replace('$', ''));
        const priceB = parseFloat(b.querySelector('.price')?.innerText.replace('$', ''));

        if (isNaN(priceA) || isNaN(priceB)) {
            console.error('Price parsing error.');
            return 0; // Default if price parsing fails
        }

        if (order === 'low-to-high') {
            return priceA - priceB;
        } else if (order === 'high-to-low') {
            return priceB - priceA;
        } else {
            console.warn('Invalid sort order.');
            return 0; // Default if order is invalid
        }
    });

    // Reorder products in shop content
    products.forEach(product => shopContent.appendChild(product));
}



    </script>
</body>
</html>